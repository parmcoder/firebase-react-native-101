{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/parmcoder/muic/git/firebase-react-native-101/src/screens/Register.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { memo, useState } from 'react';\nimport Background from \"../components/Background\";\nimport Logo from \"../components/Logo\";\nimport TextInput from \"../components/TextInput\";\nimport Button from \"../components/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { emailValidator, passwordValidator } from \"../core/utils\";\nimport { registration } from \"../services/auth.js\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\n\nvar RegisterScreen = function RegisterScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState({\n    value: '',\n    error: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState({\n    value: '',\n    error: ''\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var _onRegisterPressed = function _onRegisterPressed() {\n    var emailError, passwordError, passwordConfirmError;\n    return _regeneratorRuntime.async(function _onRegisterPressed$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            emailError = emailValidator(email.value);\n            passwordError = passwordValidator(password.value);\n            passwordConfirmError = password.value === password.value;\n\n            if (!(emailError || passwordError)) {\n              _context.next = 7;\n              break;\n            }\n\n            setEmail(_objectSpread(_objectSpread({}, email), {}, {\n              error: emailError\n            }));\n            setPassword(_objectSpread(_objectSpread({}, password), {}, {\n              error: passwordError\n            }));\n            return _context.abrupt(\"return\");\n\n          case 7:\n            if (!(email.value && password.value)) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 10;\n            return _regeneratorRuntime.awrap(registration(email.value, password.value).then(function (res) {\n              if (res === 'auth/user-not-found') {\n                Alert.alert(\"Email not found, please register.\");\n              } else {\n                navigation.navigate('Dashboard');\n              }\n            }));\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(Background, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, React.createElement(Logo, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }), React.createElement(Text, {\n    style: {\n      fontWeight: 'bold',\n      color: 'hotpink',\n      fontSize: 25\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, \"Please Register\"), React.createElement(TextInput, {\n    label: \"Email\",\n    returnKeyType: \"next\",\n    autoCapitalize: \"none\",\n    autoCompleteType: \"email\",\n    textContentType: \"emailAddress\",\n    keyboardType: \"email-address\",\n    placeholder: \"Type your email address!\",\n    theme: {\n      colors: {\n        primary: 'red'\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }), React.createElement(TextInput, {\n    label: \"Password\",\n    returnKeyType: \"done\",\n    placeholder: \"Type your password!\",\n    secureTextEntry: true,\n    theme: {\n      colors: {\n        primary: 'red'\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }), React.createElement(TextInput, {\n    label: \"confirmPassword\",\n    returnKeyType: \"done\",\n    placeholder: \"Type your password again!\",\n    secureTextEntry: true,\n    theme: {\n      colors: {\n        primary: 'red'\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }), React.createElement(Button, {\n    mode: \"contained\",\n    color: \"#FF69B4\",\n    onPress: _onRegisterPressed,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, \"Confirm\"), React.createElement(Button, {\n    mode: \"contained\",\n    color: \"#FF69B4\",\n    onPress: function onPress() {\n      return navigation.navigate('LoginScreen');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, \"Already has an account\"));\n};\n\nexport default memo(RegisterScreen);","map":{"version":3,"sources":["/home/parmcoder/muic/git/firebase-react-native-101/src/screens/Register.tsx"],"names":["React","memo","useState","Background","Logo","TextInput","Button","emailValidator","passwordValidator","registration","RegisterScreen","navigation","value","error","email","setEmail","password","setPassword","_onRegisterPressed","emailError","passwordError","passwordConfirmError","then","res","Alert","alert","navigate","fontWeight","color","fontSize","colors","primary"],"mappings":"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","sourcesContent":["import React, { memo, useState } from 'react';\nimport Background from '../components/Background';\nimport Logo from '../components/Logo';\nimport Header from '../components/Header';\nimport TextInput from '../components/TextInput';\nimport { Navigation } from '../types';\nimport Button from '../components/Button';\nimport {Text} from \"react-native\";\nimport { emailValidator, passwordValidator } from '../core/utils';\nimport { registration } from '../services/auth.js';\nimport { Alert } from \"react-native\";\n\ntype Props = {\n    navigation: Navigation;\n};\n\nconst RegisterScreen = ({ navigation }: Props) => {\n    const [email, setEmail] = useState({ value: '', error: '' });\n    const [password, setPassword] = useState({ value: '', error: '' });\n  \n    const _onRegisterPressed = async () => {\n      const emailError = emailValidator(email.value);\n      const passwordError = passwordValidator(password.value);\n      const passwordConfirmError = password.value === password.value;\n\n      if (emailError || passwordError) {\n        setEmail({ ...email, error: emailError });\n        setPassword({ ...password, error: passwordError });\n        return;\n      }\n\n      if (email.value && password.value) {\n        await registration(email.value, password.value).then((res) => {\n          if (res === 'auth/user-not-found') {\n            Alert.alert(\"Email not found, please register.\");\n            // console.log(\"Email not found, please register.\");\n          } else {\n            // console.log(JSON.parse(res));\n            navigation.navigate('Dashboard');\n          }\n        })\n      }\n  \n  \n    };\n\n    return (\n        <Background>\n            <Logo />\n\n            <Text style={{ fontWeight: 'bold',color: 'hotpink', fontSize: 25}}>Please Register</Text>\n\n            <TextInput\n                label=\"Email\"\n                returnKeyType=\"next\"\n                autoCapitalize=\"none\"\n                autoCompleteType=\"email\"\n                textContentType=\"emailAddress\"\n                keyboardType=\"email-address\"\n                placeholder=\"Type your email address!\"\n                theme={{\n                    colors: {\n                        primary:'red',\n                    }\n                }}\n            />\n\n            <TextInput\n                label=\"Password\"\n                returnKeyType=\"done\"\n                placeholder=\"Type your password!\"\n                secureTextEntry\n                theme={{\n                    colors: {\n                        primary:'red',\n                    }\n                }}\n            />\n\n            <TextInput\n                label=\"confirmPassword\"\n                returnKeyType=\"done\"\n                placeholder=\"Type your password again!\"\n                secureTextEntry\n                theme={{\n                    colors: {\n                        primary:'red',\n                    }\n                }}\n            />\n\n            <Button mode=\"contained\" color='#FF69B4' onPress={_onRegisterPressed}>\n                Confirm\n            </Button>\n            <Button mode=\"contained\" color='#FF69B4' onPress={() => navigation.navigate('LoginScreen')}>\n                Already has an account\n            </Button>\n        </Background>\n    );\n};\n\nexport default memo(RegisterScreen);"]},"metadata":{},"sourceType":"module"}