{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/parmcoder/muic/git/firebase-react-native-101/src/screens/Register.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { memo, useState } from 'react';\nimport Background from \"../components/Background\";\nimport Logo from \"../components/Logo\";\nimport TextInput from \"../components/TextInput\";\nimport Button from \"../components/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { emailValidator, passwordValidator } from \"../core/utils\";\nimport { registration } from \"../services/auth.js\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\n\nvar RegisterScreen = function RegisterScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState({\n    value: '',\n    error: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState({\n    value: '',\n    error: ''\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var _useState5 = useState({\n    value: '',\n    error: ''\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      confirmPassword = _useState6[0],\n      setConfirmPassword = _useState6[1];\n\n  var _onRegisterPressed = function _onRegisterPressed() {\n    var emailError, passwordError, passwordConfirmError;\n    return _regeneratorRuntime.async(function _onRegisterPressed$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            emailError = emailValidator(email.value);\n            passwordError = passwordValidator(password.value);\n            passwordConfirmError = confirmPassword.value !== password.value;\n\n            if (!(emailError || passwordError)) {\n              _context.next = 7;\n              break;\n            }\n\n            setEmail(_objectSpread(_objectSpread({}, email), {}, {\n              error: emailError\n            }));\n            setPassword(_objectSpread(_objectSpread({}, password), {}, {\n              error: passwordError\n            }));\n            return _context.abrupt(\"return\");\n\n          case 7:\n            if (!passwordConfirmError) {\n              _context.next = 11;\n              break;\n            }\n\n            setPassword(_objectSpread(_objectSpread({}, password), {}, {\n              error: 'Password and confirm password do not match'\n            }));\n            setConfirmPassword(_objectSpread(_objectSpread({}, confirmPassword), {}, {\n              error: 'Password and confirm password do not match'\n            }));\n            return _context.abrupt(\"return\");\n\n          case 11:\n            if (!(email.value && password.value)) {\n              _context.next = 14;\n              break;\n            }\n\n            _context.next = 14;\n            return _regeneratorRuntime.awrap(registration(email.value, password.value).then(function (res) {\n              if (res === 'auth/email-already-in-use') {\n                Alert.alert(\"Please use another email.\");\n                console.log(\"Please use another email.\");\n              } else {\n                Alert.alert(\"Successfully registered!\");\n                console.log(\"Successfully registered!\");\n                navigation.navigate('LoginScreen');\n              }\n            }));\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(Background, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, React.createElement(Logo, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }), React.createElement(Text, {\n    style: {\n      fontWeight: 'bold',\n      color: 'hotpink',\n      fontSize: 25\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, \"Please Register\"), React.createElement(TextInput, {\n    label: \"Email\",\n    returnKeyType: \"next\",\n    value: email.value,\n    onChangeText: function onChangeText(text) {\n      return setEmail({\n        value: text,\n        error: ''\n      });\n    },\n    error: !!email.error,\n    errorText: email.error,\n    autoCapitalize: \"none\",\n    autoCompleteType: \"email\",\n    textContentType: \"emailAddress\",\n    keyboardType: \"email-address\",\n    placeholder: \"Type your email address!\",\n    theme: {\n      colors: {\n        primary: 'red'\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }), React.createElement(TextInput, {\n    label: \"Password\",\n    returnKeyType: \"done\",\n    value: password.value,\n    onChangeText: function onChangeText(text) {\n      return setPassword({\n        value: text,\n        error: ''\n      });\n    },\n    error: !!password.error,\n    errorText: password.error,\n    placeholder: \"Type your password!\",\n    secureTextEntry: true,\n    theme: {\n      colors: {\n        primary: 'red'\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }), React.createElement(TextInput, {\n    label: \"Confirm Password\",\n    returnKeyType: \"done\",\n    value: confirmPassword.value,\n    onChangeText: function onChangeText(text) {\n      return setConfirmPassword({\n        value: text,\n        error: ''\n      });\n    },\n    error: !!confirmPassword.error,\n    errorText: confirmPassword.error,\n    placeholder: \"Type your password again!\",\n    secureTextEntry: true,\n    theme: {\n      colors: {\n        primary: 'red'\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }), React.createElement(Button, {\n    mode: \"contained\",\n    color: \"#FF69B4\",\n    onPress: _onRegisterPressed,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, \"Confirm\"), React.createElement(Button, {\n    mode: \"contained\",\n    color: \"#FF69B4\",\n    onPress: function onPress() {\n      return navigation.navigate('LoginScreen');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }, \"Already has an account\"));\n};\n\nexport default memo(RegisterScreen);","map":{"version":3,"sources":["/home/parmcoder/muic/git/firebase-react-native-101/src/screens/Register.tsx"],"names":["React","memo","useState","Background","Logo","TextInput","Button","emailValidator","passwordValidator","registration","RegisterScreen","navigation","value","error","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","_onRegisterPressed","emailError","passwordError","passwordConfirmError","then","res","Alert","alert","console","log","navigate","fontWeight","color","fontSize","text","colors","primary"],"mappings":"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","sourcesContent":["import React, { memo, useState } from 'react';\nimport Background from '../components/Background';\nimport Logo from '../components/Logo';\nimport Header from '../components/Header';\nimport TextInput from '../components/TextInput';\nimport { Navigation } from '../types';\nimport Button from '../components/Button';\nimport { Text } from \"react-native\";\nimport { emailValidator, passwordValidator } from '../core/utils';\nimport { registration } from '../services/auth.js';\nimport { Alert } from \"react-native\";\n\ntype Props = {\n    navigation: Navigation;\n};\n\nconst RegisterScreen = ({ navigation }: Props) => {\n    const [email, setEmail] = useState({ value: '', error: '' });\n    const [password, setPassword] = useState({ value: '', error: '' });\n    const [confirmPassword, setConfirmPassword] = useState({ value: '', error: '' });\n\n    const _onRegisterPressed = async () => {\n        const emailError = emailValidator(email.value);\n        const passwordError = passwordValidator(password.value);\n        const passwordConfirmError = confirmPassword.value !== password.value;\n\n        if (emailError || passwordError) {\n            setEmail({ ...email, error: emailError });\n            setPassword({ ...password, error: passwordError });\n            return;\n        }\n\n        if (passwordConfirmError) {\n            setPassword({ ...password, error: 'Password and confirm password do not match' });\n            setConfirmPassword({ ...confirmPassword, error: 'Password and confirm password do not match' });\n            return;\n        }\n\n        if (email.value && password.value) {\n            await registration(email.value, password.value).then((res) => {\n                if (res === 'auth/email-already-in-use'){\n                    Alert.alert(\"Please use another email.\");\n                    console.log(\"Please use another email.\")\n                }else{\n                    Alert.alert(\"Successfully registered!\");\n                    console.log(\"Successfully registered!\")\n                    navigation.navigate('LoginScreen');\n                }\n            })\n        }\n\n\n    };\n\n    return (\n        <Background>\n            <Logo />\n\n            <Text style={{ fontWeight: 'bold', color: 'hotpink', fontSize: 25 }}>Please Register</Text>\n\n            <TextInput\n                label=\"Email\"\n                returnKeyType=\"next\"\n                value={email.value}\n                onChangeText={text => setEmail({ value: text, error: '' })}\n                error={!!email.error}\n                errorText={email.error}\n                autoCapitalize=\"none\"\n                autoCompleteType=\"email\"\n                textContentType=\"emailAddress\"\n                keyboardType=\"email-address\"\n                placeholder=\"Type your email address!\"\n                theme={{\n                    colors: {\n                        primary: 'red',\n                    }\n                }}\n            />\n\n            <TextInput\n                label=\"Password\"\n                returnKeyType=\"done\"\n                value={password.value}\n                onChangeText={text => setPassword({ value: text, error: '' })}\n                error={!!password.error}\n                errorText={password.error}\n                placeholder=\"Type your password!\"\n                secureTextEntry\n                theme={{\n                    colors: {\n                        primary: 'red',\n                    }\n                }}\n            />\n\n            <TextInput\n                label=\"Confirm Password\"\n                returnKeyType=\"done\"\n                value={confirmPassword.value}\n                onChangeText={text => setConfirmPassword({ value: text, error: '' })}\n                error={!!confirmPassword.error}\n                errorText={confirmPassword.error}\n                placeholder=\"Type your password again!\"\n                secureTextEntry\n                theme={{\n                    colors: {\n                        primary: 'red',\n                    }\n                }}\n            />\n\n            <Button mode=\"contained\" color='#FF69B4' onPress={_onRegisterPressed}>\n                Confirm\n            </Button>\n            <Button mode=\"contained\" color='#FF69B4' onPress={() => navigation.navigate('LoginScreen')}>\n                Already has an account\n            </Button>\n        </Background>\n    );\n};\n\nexport default memo(RegisterScreen);"]},"metadata":{},"sourceType":"module"}